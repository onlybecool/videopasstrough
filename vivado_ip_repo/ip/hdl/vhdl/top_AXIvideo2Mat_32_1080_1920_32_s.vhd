-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_AXIvideo2Mat_32_1080_1920_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of top_AXIvideo2Mat_32_1080_1920_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_true : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal eol_1_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_190 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_reg_201 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_2_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_309_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_401 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal brmerge_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_113 : BOOLEAN;
    signal exitcond1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_3_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_137 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_3_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V1_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_157 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_1_phi_fu_171_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_182_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_phi_fu_205_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_213pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_225pp1_it0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_phi_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_eol_2_reg_237pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_1_mux_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_294_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_80 : BOOLEAN;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal ap_sig_bdd_170 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2)) or ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_147 assign process. --
    axi_data_V1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_data_V1_reg_147 <= tmp_data_V_reg_378;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_data_V1_reg_147 <= axi_data_V_3_reg_260;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_179 assign process. --
    axi_data_V_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_reg_179 <= p_Val2_s_reg_225;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2))) then 
                axi_data_V_1_reg_179 <= axi_data_V1_reg_147;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_260 assign process. --
    axi_data_V_3_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_260 <= axi_data_V_1_phi_fu_182_p4;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_272) and not(ap_sig_bdd_113))) then 
                axi_data_V_3_reg_260 <= INPUT_STREAM_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_137 assign process. --
    axi_last_V1_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_last_V1_reg_137 <= tmp_last_V_reg_386;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_last_V1_reg_137 <= axi_last_V_3_reg_248;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_213 assign process. --
    axi_last_V_2_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_99) then
                if (ap_sig_bdd_151) then 
                    axi_last_V_2_reg_213 <= eol_1_phi_fu_171_p4;
                elsif (ap_sig_bdd_80) then 
                    axi_last_V_2_reg_213 <= INPUT_STREAM_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_213 <= ap_reg_phiprechg_axi_last_V_2_reg_213pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_248 assign process. --
    axi_last_V_3_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_248 <= eol_1_phi_fu_171_p4;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_272) and not(ap_sig_bdd_113))) then 
                axi_last_V_3_reg_248 <= INPUT_STREAM_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_168 assign process. --
    eol_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_1_reg_168 <= axi_last_V_2_reg_213;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2))) then 
                eol_1_reg_168 <= axi_last_V1_reg_137;
            end if; 
        end if;
    end process;

    -- eol_2_reg_237 assign process. --
    eol_2_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_99) then
                if (ap_sig_bdd_151) then 
                    eol_2_reg_237 <= eol_1_mux_fu_342_p2;
                elsif (ap_sig_bdd_80) then 
                    eol_2_reg_237 <= INPUT_STREAM_TLAST;
                elsif ((ap_true = ap_true)) then 
                    eol_2_reg_237 <= ap_reg_phiprechg_eol_2_reg_237pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- eol_3_reg_272 assign process. --
    eol_3_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0)))) then 
                eol_3_reg_272 <= eol_phi_fu_205_p4;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_272) and not(ap_sig_bdd_113))) then 
                eol_3_reg_272 <= INPUT_STREAM_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_201 assign process. --
    eol_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_201 <= eol_2_reg_237;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2))) then 
                eol_reg_201 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_190 assign process. --
    p_1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                p_1_reg_190 <= j_V_fu_321_p2;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_303_p2))) then 
                p_1_reg_190 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_225 assign process. --
    p_Val2_s_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_99) then
                if (ap_sig_bdd_151) then 
                    p_Val2_s_reg_225 <= axi_data_V_1_phi_fu_182_p4;
                elsif (ap_sig_bdd_80) then 
                    p_Val2_s_reg_225 <= INPUT_STREAM_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_225 <= ap_reg_phiprechg_p_Val2_s_reg_225pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_157 assign process. --
    p_s_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                p_s_reg_157 <= ap_const_lv11_0;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                p_s_reg_157 <= i_V_reg_401;
            end if; 
        end if;
    end process;

    -- sof_1_fu_94 assign process. --
    sof_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_fu_94 <= ap_const_lv1_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                sof_1_fu_94 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond2_reg_406 <= exitcond2_fu_315_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                i_V_reg_401 <= i_V_fu_309_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                tmp_4_reg_418 <= tmp_4_fu_349_p1;
                tmp_5_reg_423 <= p_Val2_s_phi_fu_229_p4(15 downto 8);
                tmp_6_reg_428 <= p_Val2_s_phi_fu_229_p4(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((INPUT_STREAM_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_378 <= INPUT_STREAM_TDATA;
                tmp_last_V_reg_386 <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, INPUT_STREAM_TVALID, exitcond2_fu_315_p2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1, ap_sig_bdd_113, exitcond1_fu_303_p2, eol_3_reg_272, tmp_user_V_fu_294_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((INPUT_STREAM_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_294_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((INPUT_STREAM_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_294_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_303_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_315_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_272) and not(ap_sig_bdd_113))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_113) and not((ap_const_lv1_0 = eol_3_reg_272)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- INPUT_STREAM_TREADY assign process. --
    INPUT_STREAM_TREADY_assign_proc : process(ap_CS_fsm, INPUT_STREAM_TVALID, exitcond2_fu_315_p2, ap_reg_ppiten_pp1_it0, brmerge_fu_330_p2, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1, ap_sig_bdd_113, eol_3_reg_272)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((INPUT_STREAM_TVALID = ap_const_logic_0))) or ((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_272) and not(ap_sig_bdd_113)) or ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_330_p2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond1_fu_303_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_303_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_303_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_303_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_213pp1_it0 <= ap_const_lv1_1;
    ap_reg_phiprechg_eol_2_reg_237pp1_it0 <= ap_const_lv1_1;
    ap_reg_phiprechg_p_Val2_s_reg_225pp1_it0 <= ap_const_lv32_1;

    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(INPUT_STREAM_TVALID, eol_3_reg_272)
    begin
                ap_sig_bdd_113 <= ((INPUT_STREAM_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_272));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(exitcond2_fu_315_p2, brmerge_fu_330_p2)
    begin
                ap_sig_bdd_151 <= ((exitcond2_fu_315_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_330_p2)));
    end process;


    -- ap_sig_bdd_170 assign process. --
    ap_sig_bdd_170_assign_proc : process(ap_CS_fsm, exitcond2_fu_315_p2, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_170 <= ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond2_fu_315_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(exitcond2_fu_315_p2, brmerge_fu_330_p2)
    begin
                ap_sig_bdd_80 <= ((exitcond2_fu_315_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_330_p2));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(INPUT_STREAM_TVALID, exitcond2_fu_315_p2, brmerge_fu_330_p2)
    begin
                ap_sig_bdd_81 <= ((INPUT_STREAM_TVALID = ap_const_logic_0) and (exitcond2_fu_315_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_330_p2));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond2_reg_406)
    begin
                ap_sig_bdd_92 <= (((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond2_reg_406 = ap_const_lv1_0)) or ((exitcond2_reg_406 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond2_reg_406 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_99 <= ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- axi_data_V_1_phi_fu_182_p4 assign process. --
    axi_data_V_1_phi_fu_182_p4_assign_proc : process(ap_CS_fsm, axi_data_V_1_reg_179, p_Val2_s_reg_225, exitcond2_reg_406, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_phi_fu_182_p4 <= p_Val2_s_reg_225;
        else 
            axi_data_V_1_phi_fu_182_p4 <= axi_data_V_1_reg_179;
        end if; 
    end process;

    brmerge_fu_330_p2 <= (sof_1_fu_94 or eol_phi_fu_205_p4);
    eol_1_mux_fu_342_p2 <= (eol_1_phi_fu_171_p4 or not_sof_2_fu_336_p2);

    -- eol_1_phi_fu_171_p4 assign process. --
    eol_1_phi_fu_171_p4_assign_proc : process(ap_CS_fsm, eol_1_reg_168, axi_last_V_2_reg_213, exitcond2_reg_406, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_1_phi_fu_171_p4 <= axi_last_V_2_reg_213;
        else 
            eol_1_phi_fu_171_p4 <= eol_1_reg_168;
        end if; 
    end process;


    -- eol_phi_fu_205_p4 assign process. --
    eol_phi_fu_205_p4_assign_proc : process(ap_CS_fsm, eol_reg_201, eol_2_reg_237, exitcond2_reg_406, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_205_p4 <= eol_2_reg_237;
        else 
            eol_phi_fu_205_p4 <= eol_reg_201;
        end if; 
    end process;

    exitcond1_fu_303_p2 <= "1" when (p_s_reg_157 = ap_const_lv11_438) else "0";
    exitcond2_fu_315_p2 <= "1" when (p_1_reg_190 = ap_const_lv11_780) else "0";
    i_V_fu_309_p2 <= std_logic_vector(unsigned(p_s_reg_157) + unsigned(ap_const_lv11_1));
    img_data_stream_0_V_din <= tmp_4_reg_418;

    -- img_data_stream_0_V_write assign process. --
    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_406, ap_reg_ppiten_pp1_it0, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_5_reg_423;

    -- img_data_stream_1_V_write assign process. --
    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_406, ap_reg_ppiten_pp1_it0, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_6_reg_428;

    -- img_data_stream_2_V_write assign process. --
    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_406, ap_reg_ppiten_pp1_it0, ap_sig_bdd_81, ap_sig_bdd_92, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (exitcond2_reg_406 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_81) or (ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_321_p2 <= std_logic_vector(unsigned(p_1_reg_190) + unsigned(ap_const_lv11_1));
    not_sof_2_fu_336_p2 <= (sof_1_fu_94 xor ap_const_lv1_1);

    -- p_Val2_s_phi_fu_229_p4 assign process. --
    p_Val2_s_phi_fu_229_p4_assign_proc : process(INPUT_STREAM_TDATA, brmerge_fu_330_p2, axi_data_V_1_phi_fu_182_p4, ap_sig_bdd_170)
    begin
        if (ap_sig_bdd_170) then
            if (not((ap_const_lv1_0 = brmerge_fu_330_p2))) then 
                p_Val2_s_phi_fu_229_p4 <= axi_data_V_1_phi_fu_182_p4;
            elsif ((ap_const_lv1_0 = brmerge_fu_330_p2)) then 
                p_Val2_s_phi_fu_229_p4 <= INPUT_STREAM_TDATA;
            else 
                p_Val2_s_phi_fu_229_p4 <= ap_const_lv32_1;
            end if;
        else 
            p_Val2_s_phi_fu_229_p4 <= ap_const_lv32_1;
        end if; 
    end process;

    tmp_4_fu_349_p1 <= p_Val2_s_phi_fu_229_p4(8 - 1 downto 0);
    tmp_user_V_fu_294_p1 <= INPUT_STREAM_TUSER;
end behav;
